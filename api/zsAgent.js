const fetch = require('node-fetch');

module.exports = async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Only POST allowed' });
  }

  const { prompt } = req.body;

  if (!prompt) {
    return res.status(400).json({ error: 'Missing prompt field' });
  }

  const info = `
126. –±—Ä–∏–≥–∞–¥–∞ –í–û–à–ò–ù (–í–∞–∑–¥—É—Ö–æ–ø–ª–æ–≤–Ω–æ–≥ –æ—Å–º–∞—Ç—Ä–∞—ö–∞, —ò–∞–≤—ô–∞—ö–∞ –∏ –Ω–∞–≤–æ—í–µ—ö–∞) —ò–µ —ò–µ–¥–∏–Ω–∏—Ü–∞ –†–∞—Ç–Ω–æ–≥ –≤–∞–∑–¥—É—Ö–æ–ø–ª–æ–≤—Å—Ç–≤–∞ –∏ –ü–í–û –í–æ—ò—Å–∫–µ –°—Ä–±–∏—ò–µ, –∑–∞–¥—É–∂–µ–Ω–∞ –∑–∞ –∑–∞—à—Ç–∏—Ç—É –≤–∞–∑–¥—É—à–Ω–æ–≥ –ø—Ä–æ—Å—Ç–æ—Ä–∞ –†–µ–ø—É–±–ª–∏–∫–µ –°—Ä–±–∏—ò–µ.

üìç –°–µ–¥–∏—à—Ç–µ: –ë–µ–æ–≥—Ä–∞–¥  
üë§ –ö–æ–º–∞–Ω–¥–∞–Ω—Ç: –ø—É–∫–æ–≤–Ω–∏–∫ –à–æ–≤–∏—Ü–∞ –ö–µ–ø—á–∏—ò–∞  
üìû –¢–µ–ª–µ—Ñ–æ–Ω: +381 11 3053-282  
üìß –ï-–ø–æ—à—Ç–∞: cvs.126brvojin@vs.rs

üéØ –ó–∞–¥–∞—Ü–∏:
- –ù–µ–ø—Ä–µ–∫–∏–¥–Ω–æ –æ—Å–º–∞—Ç—Ä–∞—ö–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞ –≤–∞–∑–¥—É—à–Ω–æ–≥ –ø—Ä–æ—Å—Ç–æ—Ä–∞
- –û—Ç–∫—Ä–∏–≤–∞—ö–µ, –ø—Ä–∞—õ–µ—ö–µ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞ –≤–∞–∑–¥—É—à–Ω–∏—Ö —Ü–∏—ô–µ–≤–∞
- –ù–∞–≤–æ—í–µ—ö–µ –ª–æ–≤–∞—á–∫–µ –∞–≤–∏—ò–∞—Ü–∏—ò–µ
- –£—Å–º–µ—Ä–∞–≤–∞—ö–µ –ü–í–û —ò–µ–¥–∏–Ω–∏—Ü–∞
- –ü–æ–º–æ—õ –≤–∞–∑–¥—É—Ö–æ–ø–ª–æ–≤–∏–º–∞ —É –Ω—É–∂–¥–∏
- –û–±–∞–≤–µ—à—Ç–∞–≤–∞—ö–µ –æ —Å–∏—Ç—É–∞—Ü–∏—ò–∏ —É –≤–∞–∑–¥—É—à–Ω–æ–º –ø—Ä–æ—Å—Ç–æ—Ä—É
- –û–¥—Ä–∂–∞–≤–∞—ö–µ —Ä–∞–¥–∞—Ä–∞ –∏ —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—ò–µ

üõ°Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
- –ö–æ–º–∞–Ω–¥–Ω–∞ —á–µ—Ç–∞
- 20. –±–∞—Ç–∞—ô–æ–Ω –í–û–à–ò–ù
- 31. –±–∞—Ç–∞—ô–æ–Ω –í–û–à–ò–ù
- –ë–∞—Ç–∞—ô–æ–Ω –∑–∞ —Ç–µ—Ö–Ω–∏—á–∫–æ –æ–¥—Ä–∂–∞–≤–∞—ö–µ –∏ —Å–Ω–∞–±–¥–µ–≤–∞—ö–µ

üì° –û–ø—Ä–µ–º–∞:
- AN/TPS-70
- GM-400
- GM-200
- –°–û–í–ê 24
- AS-84

üèÖ –î–∞–Ω —ò–µ–¥–∏–Ω–∏—Ü–µ: 12. –æ–∫—Ç–æ–±–∞—Ä  
–ö—Ä—Å–Ω–∞ —Å–ª–∞–≤–∞: –°–≤–µ—Ç–∏ –ü–µ—Ç–∞—Ä –ö–æ—Ä–∏—à–∫–∏  
`;

  const systemPrompt = `
–¢–∏ —Å–∏ –ó–∞—Å—Ç–∞–≤–Ω–∏–∫ AI ‚Äì –≤–æ—ò–Ω–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ—ò–∏ –æ–¥–≥–æ–≤–∞—Ä–∞ –∏—Å–∫—ô—É—á–∏–≤–æ –Ω–∞ —Å—Ä–ø—Å–∫–æ–º —ò–µ–∑–∏–∫—É, —õ–∏—Ä–∏–ª–∏—Ü–æ–º.

–¢–≤–æ—ò–∞ —É–ª–æ–≥–∞:
- –û–¥–≥–æ–≤–∞—Ä–∞—ò —Å–∞–º–æ –Ω–∞ –æ—Å–Ω–æ–≤—É —Å–ª–µ–¥–µ—õ–∏—Ö –ø–æ–¥–∞—Ç–∞–∫–∞ –æ 126. –±—Ä–∏–≥–∞–¥–∏ –í–û–à–ò–ù
- –ù–µ–º–∞ –∏–∑–º–∏—à—ô–∞—ö–∞, –∞–∫–æ –Ω–µ–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—ò–µ ‚Äì –æ–¥–≥–æ–≤–æ—Ä–∏: "–ù–µ–º–∞ –ø–æ–¥–∞—Ç–∫–∞."
- –ë—É–¥–∏ –∫—Ä–∞—Ç–∞–∫, –≤–æ—ò–Ω–∏—á–∫–∏, –Ω–∞—ò–≤–∏—à–µ 3 —Ä–µ—á–µ–Ω–∏—Ü–µ
- –ù–µ –∫–æ—Ä–∏—Å—Ç–∏ –µ–Ω–≥–ª–µ—Å–∫–µ —Ä–µ—á–∏
- –ë–µ–∑ –¥–æ–¥–∞—Ç–Ω–æ–≥ —Ç—É–º–∞—á–µ—ö–∞

${info}
`;

  try {
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'deepseek/deepseek-r1-0528-qwen3-8b',
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: prompt
          }
        ]
      })
    });

    const data = await response.json();
    const output = data.choices?.[0]?.message?.content;

    if (!output) {
      return res.status(500).json({ error: 'Empty response from AI' });
    }

    res.status(200).json({ output });
  } catch (err) {
    console.error('OpenRouter API error:', err);
    res.status(500).json({ error: 'AI request failed' });
  }
};
